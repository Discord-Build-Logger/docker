version: "3.8"

services:
  postgres:
    container_name: dbl_postgres
    image: postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

  rabbitmq:
    container_name: dbl_rabbitmq
    image: rabbitmq:management
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-config:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "15672:15672"
    depends_on:
      - postgres

  api:
    container_name: dbl_api
    build: api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=${POSTGRES_SCHEMA}
    ports:
      - "${API_PORT}:8080"
    links:
      - rabbitmq
      - postgres
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: always

  runtime:
    container_name: dbl_runtime
    build: runtime
    environment:
      - USE_RABBITMQ=true
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?schema=${POSTGRES_SCHEMA}
      - INTERNAL_BUILD_GRABBER_URL=${INTERNAL_BUILD_GRABBER_URL}
      - INTERNAL_BUILD_GRABBER_AUTH=${INTERNAL_BUILD_GRABBER_AUTH}
    links:
      - rabbitmq
      - postgres
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: always

volumes:
  postgres-data:
  rabbitmq-data:
  rabbitmq-config:
